// <auto-generated />
using System;
using AccountsViewer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AccountsViewer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250609125519_SeedUsers")]
    partial class SeedUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AccountsViewer.Entities.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountId = 1,
                            Name = "R&D"
                        },
                        new
                        {
                            AccountId = 2,
                            Name = "Canteen"
                        },
                        new
                        {
                            AccountId = 3,
                            Name = "CEO's car"
                        },
                        new
                        {
                            AccountId = 4,
                            Name = "Marketing"
                        },
                        new
                        {
                            AccountId = 5,
                            Name = "Parking fines"
                        });
                });

            modelBuilder.Entity("AccountsViewer.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PasswordHash = "$2b$12$wMH.912CBrm44SnwSueqyONVJ57p9IHNZZ1bT9XXbL26UebXt5DwW",
                            Role = "Admin",
                            Username = "admin@99x"
                        },
                        new
                        {
                            Id = 2,
                            PasswordHash = "$2b$12$VQQ6E2E5e.JVvkC/CEE1l.pJSVRb1lqiAMYhlydaYrsrJGbsk5IIi",
                            Role = "User",
                            Username = "user@99x"
                        });
                });

            modelBuilder.Entity("AccountsViewer.Entities.MonthlyBalance", b =>
                {
                    b.Property<int>("MonthlyBalanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MonthlyBalanceId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("UploadAuditId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("MonthlyBalanceId");

                    b.HasIndex("UploadAuditId");

                    b.HasIndex("AccountId", "Year", "Month")
                        .IsUnique();

                    b.ToTable("MonthlyBalances");
                });

            modelBuilder.Entity("AccountsViewer.Entities.UploadAudit", b =>
                {
                    b.Property<int>("UploadAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UploadAuditId"));

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProcessStatus")
                        .HasColumnType("int");

                    b.Property<string>("StorageBlobUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UploadAuditId");

                    b.ToTable("UploadAudits");
                });

            modelBuilder.Entity("AccountsViewer.Entities.MonthlyBalance", b =>
                {
                    b.HasOne("AccountsViewer.Entities.Account", "Account")
                        .WithMany("MonthlyBalances")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountsViewer.Entities.UploadAudit", "UploadAudit")
                        .WithMany("MonthlyBalances")
                        .HasForeignKey("UploadAuditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("UploadAudit");
                });

            modelBuilder.Entity("AccountsViewer.Entities.Account", b =>
                {
                    b.Navigation("MonthlyBalances");
                });

            modelBuilder.Entity("AccountsViewer.Entities.UploadAudit", b =>
                {
                    b.Navigation("MonthlyBalances");
                });
#pragma warning restore 612, 618
        }
    }
}
